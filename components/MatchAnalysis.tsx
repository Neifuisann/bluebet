import { useState } from 'react';
import { useLanguage } from '../utils/i18n/LanguageContext';

interface MatchAnalysisProps {
  homeTeam: string;
  awayTeam: string;
  homeScore: number;
  awayScore: number;
}

export default function MatchAnalysis({ homeTeam, awayTeam, homeScore, awayScore }: MatchAnalysisProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [analysis, setAnalysis] = useState<string | null>(null);
  const { t } = useLanguage();

  // Function to generate match analysis
  const generateAnalysis = async () => {
    if (analysis) {
      // Already have analysis, just toggle visibility
      setIsOpen(!isOpen);
      return;
    }

    try {
      setIsLoading(true);
      setIsOpen(true);
      
      // In a real application, we would fetch the analysis from an API
      // For now, generate a plausible analysis locally
      await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate loading
      
      let generatedAnalysis = '';
      if (homeScore > awayScore) {
        generatedAnalysis = `${homeTeam} demonstrated superior tactical organization and finishing quality in their ${homeScore}-${awayScore} victory over ${awayTeam}. Their attacking efficiency was evident in the final third, converting a higher percentage of chances created. ${awayTeam} struggled to contain the offensive pressure, particularly in transition phases.`;
      } else if (awayScore > homeScore) {
        generatedAnalysis = `${awayTeam} secured an impressive ${awayScore}-${homeScore} away win against ${homeTeam}, showcasing exceptional counter-attacking football and defensive resilience. ${homeTeam}, despite home advantage, couldn't capitalize on possession and territorial dominance, lacking the cutting edge in critical moments.`;
      } else {
        generatedAnalysis = `The ${homeScore}-${awayScore} draw between ${homeTeam} and ${awayTeam} reflected an evenly contested match where both teams had periods of dominance. Defensive organization ultimately prevailed over attacking creativity, with both sides creating but failing to convert clear goal-scoring opportunities. The tactical battle between the managers ended in a fair stalemate.`;
      }
      
      setAnalysis(generatedAnalysis);
    } catch (error) {
      console.error('Error generating match analysis:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="mt-4">
      <button
        onClick={generateAnalysis}
        className="flex items-center text-sm font-medium text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors"
      >
        <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        {isOpen ? 'Hide AI Analysis' : 'Show AI Analysis'}
      </button>
      
      {isOpen && (
        <div className="mt-2 p-4 bg-gray-50 dark:bg-gray-800 rounded-md border border-gray-200 dark:border-gray-700">
          {isLoading ? (
            <div className="flex justify-center items-center py-6">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500" />
              <span className="ml-2 text-gray-600 dark:text-gray-300">Generating analysis...</span>
            </div>
          ) : (
            <>
              <h4 className="text-lg font-semibold mb-2">{homeTeam} {homeScore} - {awayScore} {awayTeam}</h4>
              <p className="text-gray-700 dark:text-gray-300">{analysis}</p>
              
              <div className="mt-4 text-xs text-gray-500 italic">
                Analysis generated by AI. This is for entertainment purposes only.
              </div>
            </>
          )}
        </div>
      )}
    </div>
  );
} 